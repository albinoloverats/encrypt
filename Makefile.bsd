.PHONY: clean distclean

APP            = encrypt
ALT            = decrypt

COMMON_SRC     = src/common/error.c src/common/ccrypt.c src/common/tlv.c src/common/version.c src/common/config.c src/common/fs.c src/common/cli.c src/common/dir.c src/common/ecc.c src/common/non-gnu.c
CLI_SRC        = ${COMMON_SRC} src/main.c src/crypt.c src/encrypt.c src/decrypt.c src/crypt_io.c
GUI_SRC        = ${CLI_SRC} src/gui-gtk.c
MISC           = src/common/misc.h

CLI_CFLAGS     = ${CFLAGS} -Wall -Wextra -std=gnu99 `libgcrypt-config --cflags` -pipe -O2
CLI_CPPFLAGS   = ${CPPFLAGS} -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -DGCRYPT_NO_DEPRECATED -DGIT_COMMIT=\"`git log | head -n1 | cut -f2 -d' '`\" -DBUILD_OS=\""FreeBSD `freebsd-version`"\"
GUI_CFLAGS     = ${CLI_CFLAGS} `pkg-config --cflags gtk+-3.0 gmodule-2.0`
GUI_CPPFLAGS   = ${CLI_CPPFLAGS} -DBUILD_GUI

DEBUG_CFLAGS   = -O0 -ggdb -pg
DEBUG_CPPFLAGS = -D__DEBUG__ -D__DEBUG_GUI__ -DMALLOC_CHECK_=1
DEBUG_ENC      = ${DEBUG_CPPFLAGS} -D__DEBUG_WITH_ENCRYPTION__

CLI_LIBS       = `libgcrypt-config --libs` -lpthread -lcurl -llzma
GUI_LIBS       = ${CLI_LIBS} `pkg-config --libs gtk+-3.0 gmodule-2.0`

STAGEDIR       = ../stage

all: gui man
	 @ln -fs ${APP} ${ALT}
	-@echo -e "linked ‘${ALT}’ → ‘${APP}’"

debug: cli-debug

cli:
	 @echo "#define ALL_CFLAGS   ${CLI_CFLAGS}  " | tr "\"" "'" | sed 's/FLAGS   /FLAGS   "/' | sed 's/$$/"/' >  ${MISC}
	 @echo "#define ALL_CPPFLAGS ${CLI_CPPFLAGS}" | tr "\"" "'" | sed 's/FLAGS /FLAGS "/'     | sed 's/$$/"/' >> ${MISC}
	 @${CC} ${CLI_LIBS} ${CLI_CFLAGS} ${CLI_CPPFLAGS} ${CLI_SRC} -o ${APP}
	-@echo -e "built ‘`echo -e ${CLI_SRC} | sed 's/ /’\n      ‘/g'`’ → ‘${APP}’"

cli-debug:
	 @echo "#define ALL_CFLAGS   ${CLI_CFLAGS}   ${DEBUG_CFLAGS}  " | tr "\"" "'" | sed 's/FLAGS   /FLAGS   "/' | sed 's/$$/"/' >  ${MISC}
	 @echo "#define ALL_CPPFLAGS ${CLI_CPPFLAGS} ${DEBUG_CPPFLAGS}" | tr "\"" "'" | sed 's/FLAGS /FLAGS "/'     | sed 's/$$/"/' >> ${MISC}
	 @${CC} ${CLI_LIBS} ${CLI_CFLAGS} ${CLI_CPPFLAGS} ${CLI_SRC} ${DEBUG_CFLAGS} ${DEBUG_CPPFLAGS} -o ${APP}
	-@echo -e "built ‘`echo -e ${CLI_SRC} | sed 's/ /’\n      ‘/g'`’ → ‘${APP}’"

cli-debug-with-encryption:
	 @echo "#define ALL_CFLAGS   ${CLI_CFLAGS}   ${DEBUG_CFLAGS}  " | tr "\"" "'" | sed 's/FLAGS   /FLAGS   "/' | sed 's/$$/"/' >  ${MISC}
	 @echo "#define ALL_CPPFLAGS ${CLI_CPPFLAGS} ${DEBUG_ENC}     " | tr "\"" "'" | sed 's/FLAGS /FLAGS "/'     | sed 's/$$/"/' >> ${MISC}
	 @${CC} ${CLI_LIBS} ${CLI_CFLAGS} ${CLI_CPPFLAGS} ${CLI_SRC} ${DEBUG_CFLAGS} ${DEBUG_ENC}      -o ${APP}
	-@echo -e "built ‘`echo -e ${CLI_SRC} | sed 's/ /’\n      ‘/g'`’ → ‘${APP}’"

gui:
	 @echo "#define ALL_CFLAGS   ${GUI_CFLAGS}  " | tr "\"" "'" | sed 's/FLAGS   /FLAGS   "/' | sed 's/$$/"/' >  ${MISC}
	 @echo "#define ALL_CPPFLAGS ${GUI_CPPFLAGS}" | tr "\"" "'" | sed 's/FLAGS /FLAGS "/'     | sed 's/$$/"/' >> ${MISC}
	 @${CC} ${GUI_LIBS} ${GUI_CFLAGS} ${GUI_CPPFLAGS} ${GUI_SRC} -o ${APP}
	-@echo -e "built ‘`echo -e ${GUI_SRC} | sed 's/ /’\n      ‘/g'`’ → ‘${APP}’"

gui-debug:
	 @echo "#define ALL_CFLAGS   ${GUI_CFLAGS}   ${DEBUG_CFLAGS}  " | tr "\"" "'" | sed 's/FLAGS   /FLAGS   "/' | sed 's/$$/"/' >  ${MISC}
	 @echo "#define ALL_CPPFLAGS ${GUI_CPPFLAGS} ${DEBUG_CPPFLAGS}" | tr "\"" "'" | sed 's/FLAGS /FLAGS "/'     | sed 's/$$/"/' >> ${MISC}
	 @${CC} ${GUI_LIBS} ${GUI_CFLAGS} ${GUI_CPPFLAGS} ${GUI_SRC} ${DEBUG_CFLAGS} ${DEBUG_CPPFLAGS} -o ${APP}
	-@echo -e "built ‘`echo -e ${GUI_SRC} | sed 's/ /’\n      ‘/g'`’ → ‘${APP}’"

gui-debug-with-encryption:
	 @echo "#define ALL_CFLAGS   ${GUI_CFLAGS}   ${DEBUG_CFLAGS}  " | tr "\"" "'" | sed 's/FLAGS   /FLAGS   "/' | sed 's/$$/"/' >  ${MISC}
	 @echo "#define ALL_CPPFLAGS ${GUI_CPPFLAGS} ${DEBUG_ENC}     " | tr "\"" "'" | sed 's/FLAGS /FLAGS "/'     | sed 's/$$/"/' >> ${MISC}
	 @${CC} ${GUI_LIBS} ${GUI_CFLAGS} ${GUI_CPPFLAGS} ${GUI_SRC} ${DEBUG_CFLAGS} ${DEBUG_ENC}      -o ${APP}
	-@echo -e "built ‘`echo -e ${GUI_SRC} | sed 's/ /’\n      ‘/g'`’ → ‘${APP}’"
man:
	 @gzip -c docs/${APP}.1a > ${APP}.1a.gz
	-@echo -e "compressing ‘docs/${APP}.1a’ → ‘${APP}.1a.gz"

install:
# install the main executable, also link decrypt
	 @install -c -m 755   ${APP}   ${STAGEDIR}/${PREFIX}/bin/
	-@echo -e "installed ‘${APP}’ ‘${STAGEDIR}/${PREFIX}/bin/${APP}’"
	 @ln -f ${STAGEDIR}/${PREFIX}/bin/${APP}   ${STAGEDIR}/${PREFIX}/bin/${ALT}
	-@echo -e "linked ‘${ALT}’ →  ‘${APP}’"
# install the pixmaps
	 @mkdir -p ${STAGEDIR}/${PREFIX}/share/pixmaps/
	 @install -c -m 644   pixmaps/encrypt.svg          ${STAGEDIR}/${PREFIX}/share/pixmaps/
	-@echo -e "installed ‘pixmaps/encrypt.svg’ →      ‘${STAGEDIR}/${PREFIX}/share/pixmaps/encrypt.svg’"
	 @install -c -m 644   pixmaps/encrypt_button.svg   ${STAGEDIR}/${PREFIX}/share/pixmaps/
	-@echo -e "installed ‘pixmaps/encrypt_button.svg’ ‘${STAGEDIR}/${PREFIX}/share/pixmaps/encrypt_button.svg’"
# next encrypt.glade
	 @mkdir -pv ${STAGEDIR}/${PREFIX}/share/encrypt/
	 @install -c -m 644   etc/encrypt.glade   ${STAGEDIR}/${PREFIX}/share/encrypt/
	-@echo -e "installed ‘etc/encrypt.glade’ ‘${STAGEDIR}/${PREFIX}/share/encrypt/encrypt.glade’"
# and an example rc file
	 @install -c -m 644   etc/encryptrc   ${STAGEDIR}/${PREFIX}/share/encrypt/
	-@echo -e "installed ‘etc/encryptrc’ ‘${STAGEDIR}/${PREFIX}/share/encrypt/encryptrc’"
# ditto, but this time for the man page
	 @install -c -m 644   encrypt.1a.gz   ${STAGEDIR}/${PREFIX}/man/man1/
	-@echo -e "installed ‘encrypt.1a.gz’ '${STAGEDIR}/${PREFIX}/man/man1/encrypt.1a.gz’"
# and then the desktop files
	 @mkdir -p ${STAGEDIR}/${PREFIX}/share/applications/
	 @install -c -m 644   etc/encrypt.desktop         ${STAGEDIR}/${PREFIX}/share/applications/
	-@echo -e "installed ‘etc/encrypt.desktop’ →     ‘${STAGEDIR}/${PREFIX}/share/applications/encrypt.desktop’"
	 @mkdir -p ${STAGEDIR}/${PREFIX}/share/Thunar/sendto/
	 @install -c -m 644   etc/thunar-sendto.desktop   ${STAGEDIR}/${PREFIX}/share/Thunar/sendto/
	 @mv ${STAGEDIR}/${PREFIX}/share/Thunar/sendto/thunar-sendto.desktop ${STAGEDIR}/${PREFIX}/share/Thunar/sendto/encrypt.desktop
	-@echo -e "installed ‘etc/thunar-sendto.desktop’ ‘${STAGEDIR}/${PREFIX}/share/Thunar/sendto/encrypt.desktop’"
# and the (example) magic pattern (if all else fails, copy to ~/.magic)
# TODO on Fedora concat to /share/misc/magic and then recompile
	 @install -c -m 644   etc/magic   ${STAGEDIR}/${PREFIX}/share/encrypt/
	-@echo -e "installed ‘etc/magic’ ‘${STAGEDIR}/${PREFIX}/share/encrypt/magic’"
# and finally the auto-complete scripts
	 @mkdir etc/autocomplete
	 @cp etc/autocomplete.bash etc/autocomplete/encrypt
	 @cp etc/autocomplete.zsh etc/autocomplete/_encrypt
	 @mkdir -p ${STAGEDIR}/${PREFIX}/share/bash-completion/completions/
	 @mkdir -p ${STAGEDIR}/${PREFIX}/share/zsh/functions/Completion/Unix/
	 @install -c -m 755   etc/autocomplete/encrypt  ${STAGEDIR}/${PREFIX}/share/bash-completion/completions/
	-@echo -e "installed ‘etc/autocomplete.bash’   ‘${STAGEDIR}/${PREFIX}/share/bash-completion/completions/encrypt’"
	 @install -c -m 755   etc/autocomplete/_encrypt ${STAGEDIR}/${PREFIX}/share/zsh/functions/Completion/Unix/
	-@echo -e "installed ‘etc/autocomplete.zsh’   →‘${STAGEDIR}/${PREFIX}/share/zsh/functions/Completion/Unix/_encrypt’"

uninstall:
	 @rm -fvr ${STAGEDIR}/${PREFIX}/share/encrypt
	 @rm -fv ${STAGEDIR}/${PREFIX}/share/bash-completion/completions/encrypt
	 @rm -fv ${STAGEDIR}/${PREFIX}/share/zsh/functions/Completion/Unix/_encrypt
	 @rm -fv ${STAGEDIR}/${PREFIX}/share/pixmaps/encrypt.svg
	 @rm -fv ${STAGEDIR}/${PREFIX}/share/pixmaps/encrypt_button.svg
	 @rm -fv ${STAGEDIR}/${PREFIX}/man/man1/encrypt.1a.gz
	 @rm -fv ${STAGEDIR}/${PREFIX}/share/applications/encrypt.desktop
	 @rm -fv ${STAGEDIR}/${PREFIX}/share/Thunar/sendto/encrypt.desktop
	 @rm -fv ${STAGEDIR}/${PREFIX}/bin/${ALT}
	 @rm -fv ${STAGEDIR}/${PREFIX}/bin/${APP}

clean:
	 @rm -fv ${MISC}
	 @rm -fv ${APP}
	 @rm -fv ${ALT}

distclean: clean
	 @rm -fv ${APP}.1a.gz
	 @rm -fvr pkg build
	 @rm -fv ${APP}*.pkg.tar.xz
	 @rm -fv ${APP}*.tgz
