.PHONY: clean distclean

CC             = gcc

APP            = encrypt
ALT            = decrypt

COMMON_SRC     = src/common/error.c src/common/ccrypt.c src/common/list.c src/common/tlv.c src/common/version.c src/common/config.c src/common/fs.c src/common/cli.c src/common/dir.c src/common/ecc.c src/common/non-gnu.c
CLI_SRC        = ${COMMON_SRC} src/main.c src/crypt.c src/encrypt.c src/decrypt.c src/crypt_io.c
GUI_SRC        = ${CLI_SRC} src/gui-gtk.c
MISC           = src/common/misc.h

CLI_CFLAGS     = ${CFLAGS} -Wall -std=gnu99 `libgcrypt-config --cflags` -pipe -O2 -Wformat=2
CLI_CPPFLAGS   = ${CPPFLAGS} -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -DGCRYPT_NO_DEPRECATED -DUSE_GCRYPT -DGIT_COMMIT=\"`git log | head -n1 | cut -f2 -d' '`\" -DBUILD_OS="`grep PRETTY_NAME /etc/os-release | cut -d= -f2`"
GUI_CFLAGS     = ${CLI_CFLAGS} -pthread -I/usr/include/gtk-3.0 -I/usr/include/at-spi2-atk/2.0 -I/usr/include/at-spi-2.0 -I/usr/include/dbus-1.0 -I/usr/lib64/dbus-1.0/include -I/usr/include/gio-unix-2.0/ -I/usr/include/cairo -I/usr/include/pango-1.0 -I/usr/include/atk-1.0 -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng16 -I/usr/include/harfbuzz -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include
GUI_CPPFLAGS   = ${CLI_CPPFLAGS} -DBUILD_GUI

DEBUG_CFLAGS   = -O0 -ggdb -pg
DEBUG_CPPFLAGS = -D__DEBUG__ -D__DEBUG_GUI__ -DMALLOC_CHECK_=1
DEBUG_ENC      = ${DEBUG_CPPFLAGS} -D__DEBUG_WITH_ENCRYPTION__

CLI_LIBS       = `libgcrypt-config --libs` -lpthread -lcurl -llzma
GUI_LIBS       = ${CLI_LIBS} -lgtk-3 -lgdk-3 -lz -lpangocairo-1.0 -lpango-1.0 -lharfbuzz -latk-1.0 -lcairo-gobject -lcairo -lgdk_pixbuf-2.0 -lgio-2.0 -lgobject-2.0 -lgmodule-2.0 -pthread -lglib-2.0

all: gui symlink language man

debug: cli-debug symlink

symlink:
	 @ln -fs ${APP} ${ALT}
	-@echo -e "linked ‘${ALT}’ → ‘${APP}’"

cli: symlink
	 @echo "#define ALL_CFLAGS   ${CLI_CFLAGS}  " | tr "\"" "'" | sed 's/FLAGS   /FLAGS   "/' | sed 's/$$/"/' >  ${MISC}
	 @echo "#define ALL_CPPFLAGS ${CLI_CPPFLAGS}" | tr "\"" "'" | sed 's/FLAGS /FLAGS "/'     | sed 's/$$/"/' >> ${MISC}
	 @${CC} ${CLI_LIBS} ${CLI_CFLAGS} ${CLI_CPPFLAGS} ${CLI_SRC}                                   -o ${APP}
	-@echo -e "built ${CLI_SRC} → ${APP}"

cli-debug:
	 @echo "#define ALL_CFLAGS   ${CLI_CFLAGS}   ${DEBUG_CFLAGS}  " | tr "\"" "'" | sed 's/FLAGS   /FLAGS   "/' | sed 's/$$/"/' >  ${MISC}
	 @echo "#define ALL_CPPFLAGS ${CLI_CPPFLAGS} ${DEBUG_CPPFLAGS}" | tr "\"" "'" | sed 's/FLAGS /FLAGS "/'     | sed 's/$$/"/' >> ${MISC}
	 @${CC} ${CLI_LIBS} ${CLI_CFLAGS} ${CLI_CPPFLAGS} ${CLI_SRC} ${DEBUG_CFLAGS} ${DEBUG_CPPFLAGS} -o ${APP}
	-@echo -e "built ${CLI_SRC} → ${APP}"

cli-debug-with-encryption:
	 @echo "#define ALL_CFLAGS   ${CLI_CFLAGS}   ${DEBUG_CFLAGS}  " | tr "\"" "'" | sed 's/FLAGS   /FLAGS   "/' | sed 's/$$/"/' >  ${MISC}
	 @echo "#define ALL_CPPFLAGS ${CLI_CPPFLAGS} ${DEBUG_ENC}     " | tr "\"" "'" | sed 's/FLAGS /FLAGS "/'     | sed 's/$$/"/' >> ${MISC}
	 @${CC} ${CLI_LIBS} ${CLI_CFLAGS} ${CLI_CPPFLAGS} ${CLI_SRC} ${DEBUG_CFLAGS} ${DEBUG_ENC}      -o ${APP}
	-@echo -e "built ${CLI_SRC} → ${APP}"

gui:
	 @echo "#define ALL_CFLAGS   ${GUI_CFLAGS}  " | tr "\"" "'" | sed 's/FLAGS   /FLAGS   "/' | sed 's/$$/"/' >  ${MISC}
	 @echo "#define ALL_CPPFLAGS ${GUI_CPPFLAGS}" | tr "\"" "'" | sed 's/FLAGS /FLAGS "/'     | sed 's/$$/"/' >> ${MISC}
	 @${CC} ${GUI_LIBS} ${GUI_CFLAGS} ${GUI_CPPFLAGS} ${GUI_SRC}             -o ${APP}
	-@echo -e "built ${GUI_SRC} → ${APP}"

gui-debug:
	 @echo "#define ALL_CFLAGS   ${GUI_CFLAGS}   ${DEBUG_CFLAGS}  " | tr "\"" "'" | sed 's/FLAGS   /FLAGS   "/' | sed 's/$$/"/' >  ${MISC}
	 @echo "#define ALL_CPPFLAGS ${GUI_CPPFLAGS} ${DEBUG_CPPFLAGS}" | tr "\"" "'" | sed 's/FLAGS /FLAGS "/'     | sed 's/$$/"/' >> ${MISC}
	 @${CC} ${GUI_LIBS} ${GUI_CFLAGS} ${GUI_CPPFLAGS} ${GUI_SRC} ${DEBUG_CFLAGS} ${DEBUG_CPPFLAGS} -o ${APP}
	-@echo -e "built ${GUI_SRC} → ${APP}"

gui-debug-with-encryption:
	 @echo "#define ALL_CFLAGS   ${GUI_CFLAGS}   ${DEBUG_CFLAGS}  " | tr "\"" "'" | sed 's/FLAGS   /FLAGS   "/' | sed 's/$$/"/' >  ${MISC}
	 @echo "#define ALL_CPPFLAGS ${GUI_CPPFLAGS} ${DEBUG_ENC}     " | tr "\"" "'" | sed 's/FLAGS /FLAGS "/'     | sed 's/$$/"/' >> ${MISC}
	 @${CC} ${GUI_LIBS} ${GUI_CFLAGS} ${GUI_CPPFLAGS} ${GUI_SRC} ${DEBUG_CFLAGS} ${DEBUG_ENC}      -o ${APP}
	-@echo -e "built ${GUI_SRC} → ${APP}"

language:
	-@echo -e "TODO - string translation"
#	@${MAKE} -C po

man:
	 @gzip -c docs/${APP}.1a > ${APP}.1a.gz
	-@echo -e "compressing docs/${APP}.1a  ${APP}.1a.gz"

install:
# install the main executable, also link decrypt
	 @install -m 755 -s -D -T ${APP} ${DESTDIR}/usr/bin/${APP}
	-@echo -e "installed ${APP}  ${DESTDIR}/usr/bin/${APP}"
	 @ln -f ${DESTDIR}/usr/bin/${APP} ${DESTDIR}/usr/bin/${ALT}
	-@echo -e "linked ${ALT}  ${APP}"
# install the pixmaps
	 @install -m 644 -D -T pixmaps/encrypt.svg ${DESTDIR}/usr/${LOCAL}/share/pixmaps/encrypt.svg
	-@echo -e "installed pixmaps/encrypt.svg  ${DESTDIR}/usr/${LOCAL}/share/pixmaps/encrypt.svg"
	 @install -m 644 -D -T pixmaps/encrypt_button.svg ${DESTDIR}/usr/${LOCAL}/share/pixmaps/encrypt_button.svg
	-@echo -e "installed pixmaps/encrypt_button.svg  ${DESTDIR}/usr/${LOCAL}/share/pixmaps/encrypt_button.svg"
	 @install -m 644 -D -T pixmaps/encrypt_key.png ${DESTDIR}/usr/${LOCAL}/share/pixmaps/encrypt_key.png
	-@echo -e "installed ‘pixmaps/encrypt_key.png’ → ‘${DESTDIR}/usr/${LOCAL}/share/pixmaps/encrypt_key.png’"
# next encrypt.glade
	 @install -m 644 -D -T etc/encrypt.glade ${DESTDIR}/usr/${LOCAL}/share/encrypt/encrypt.glade
	-@echo -e "installed etc/encrypt.glade  ${DESTDIR}/usr/${LOCAL}/share/encrypt/encrypt.glade"
# and an example rc file
	 @install -m 644 -D -T etc/encryptrc ${DESTDIR}/usr/${LOCAL}/share/encrypt/encryptrc
	-@echo -e "installed etc/encryptrc  ${DESTDIR}/usr/${LOCAL}/share/encrypt/encryptrc"
# ditto, but this time for the man page
	 @install -m 644 -D -T encrypt.1a.gz ${DESTDIR}/usr/${LOCAL}/share/man/man1/encrypt.1a.gz
	-@echo -e "installed encrypt.1a.gz  ${DESTDIR}/usr/${LOCAL}/share/man/man1/encrypt.1a.gz"
# and then the desktop files
	 @install -m 644 -D -T etc/encrypt.desktop ${DESTDIR}/usr/${LOCAL}/share/applications/encrypt.desktop
	-@echo -e "installed etc/encrypt.desktop  ${DESTDIR}/usr/${LOCAL}/share/applications/encrypt.desktop"
	 @install -m 644 -D -T etc/thunar-sendto.desktop ${DESTDIR}/usr/${LOCAL}/share/Thunar/sendto/encrypt.desktop
	-@echo -e "installed etc/thunar-sendto.desktop  ${DESTDIR}/usr/${LOCAL}/share/Thunar/sendto/encrypt.desktop"
# and the (example) magic pattern (if all else fails, copy to ~/.magic)
# TODO on Fedora concat to /usr/${LOCAL}/share/misc/magic and then recompile
	 @install -m 644 -D -T etc/magic ${DESTDIR}/usr/${LOCAL}/share/encrypt/magic
	-@echo -e "installed etc/magic  ${DESTDIR}/usr/${LOCAL}/share/encrypt/magic"
# and finally the auto-complete scripts
	 @install -m 755 -D -T etc/autocomplete.bash ${DESTDIR}/usr/${LOCAL}/share/bash-completion/completions/encrypt
	-@echo -e "installed etc/autocomplete.bash  ${DESTDIR}/usr/${LOCAL}/share/bash-completion/completions/encrypt"
	 @install -m 755 -D -T etc/autocomplete.zsh ${DESTDIR}/usr/${LOCAL}/share/zsh/functions/Completion/Unix/_encrypt
	-@echo -e "installed etc/autocomplete.zsh  ${DESTDIR}/usr/${LOCAL}/share/zsh/functions/Completion/Unix/_encrypt"

uninstall:
	 @rm -fr ${DESTDIR}/usr/${LOCAL}/share/encrypt
	 @rm -f ${DESTDIR}/usr/${LOCAL}/share/bash-completion/completions/encrypt
	 @rm -f ${DESTDIR}/usr/${LOCAL}/share/zsh/functions/Completion/Unix/_encrypt
	 @rm -f ${DESTDIR}/usr/${LOCAL}/share/pixmaps/encrypt.svg
	 @rm -f ${DESTDIR}/usr/${LOCAL}/share/pixmaps/encrypt_button.svg
	 @rm -fv ${DESTDIR}/usr/${LOCAL}/share/pixmaps/encrypt_key.png
	 @rm -f ${DESTDIR}/usr/${LOCAL}/share/man/man1/encrypt.1a.gz
	 @rm -f ${DESTDIR}/usr/${LOCAL}/share/applications/encrypt.desktop
	 @rm -f ${DESTDIR}/usr/${LOCAL}/share/Thunar/sendto/encrypt.desktop
	 @rm -f ${DESTDIR}/usr/bin/${ALT}
	 @rm -f ${DESTDIR}/usr/bin/${APP}

clean:
	 @rm -f ${MISC}
	 @rm -f ${APP} ${ALT}
	 @rm -f gmon.out

distclean: clean
	 @rm -f ${APP}.1a.gz
	 @rm -fr pkg build
	 @rm -f ${APP}*.pkg.tar.xz
	 @rm -f ${APP}*.tgz
