.PHONY: clean distclean

CC       = gcc

APP      = encrypt
ALT      = decrypt

SOURCE   = src/main.c src/init.c src/crypt.c src/encrypt.c src/decrypt.c src/crypt_io.c
GUI      = src/gui-gtk.c
COMMON   = src/common/error.c src/common/ccrypt.c src/common/tlv.c src/common/version.c src/common/fs.c src/common/cli.c src/common/dir.c src/common/ecc.c src/common/non-gnu.c

CFLAGS  += -Wall -std=gnu99 `libgcrypt-config --cflags` -pipe -O2 -Wformat=2
CPPFLAGS = -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -DGCRYPT_NO_DEPRECATED -DGIT_COMMIT=\"`git log | head -n1 | cut -f2 -d' '`\" -DBUILD_OS=\""Solaris `uname -v`"\"
GUIFLAGS = -DBUILD_GUI -pthread -I/usr/include/gtk-3.0 -I/usr/include/at-spi2-atk/2.0 -I/usr/include/at-spi-2.0 -I/usr/include/dbus-1.0 -I/usr/lib64/dbus-1.0/include -I/usr/include/gio-unix-2.0/ -I/usr/include/cairo -I/usr/include/pango-1.0 -I/usr/include/atk-1.0 -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng16 -I/usr/include/harfbuzz -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include

DEBUG    = -O0 -ggdb -pg -D__DEBUG__ -D__DEBUG_GUI__ -DMALLOC_CHECK_=1

LIBS     = `libgcrypt-config --libs` -lpthread -lcurl -llzma
GUILIBS  = -lgtk-3 -lgdk-3 -lz -lpangocairo-1.0 -lpango-1.0 -lharfbuzz -latk-1.0 -lcairo-gobject -lcairo -lgdk_pixbuf-2.0 -lgio-2.0 -lgobject-2.0 -lgmodule-2.0 -pthread -lglib-2.0


all: gui language man

cli: link
	 @${CC} ${CFLAGS} ${CPPFLAGS} ${SOURCE} ${COMMON} ${LIBS} -o ${APP}
	-@echo -e "built `echo -e ${SOURCE} ${COMMON} | sed 's/ /\n      /g'`  ${APP}"

debug: link
	 @${CC} ${CFLAGS} ${CPPFLAGS} ${SOURCE} ${COMMON} ${LIBS} ${DEBUG} -o ${APP}
	-@echo -e "built `echo -e ${SOURCE} ${COMMON} | sed 's/ /\n      /g'`  ${APP}"

debug-with-encryption: link
	 @${CC} ${CFLAGS} ${CPPFLAGS} ${SOURCE} ${COMMON} ${LIBS} ${DEBUG} -D__DEBUG_WITH_ENCRYPTION__ -o ${APP}
	-@echo -e "built `echo -e ${SOURCE} ${COMMON} | sed 's/ /\n      /g'`  ${APP}"

gui: link
	 @${CC} ${CFLAGS} ${CPPFLAGS} ${GUIFLAGS} ${SOURCE} ${COMMON} ${GUI} ${LIBS} ${GUILIBS} -o ${APP}
	-@echo -e "built `echo -e ${SOURCE} ${COMMON} ${GUI} | sed 's/ /\n      /g'`  ${APP}"

debug-gui: link
	 @${CC} ${CFLAGS} ${CPPFLAGS} ${GUIFLAGS} ${SOURCE} ${COMMON} ${GUI} ${LIBS} ${GUILIBS} ${DEBUG} -o ${APP}
	-@echo -e "built `echo -e ${SOURCE} ${COMMON} ${GUI} | sed 's/ /\n      /g'`  ${APP}"

debug-gui-with-encryption: link
	 @${CC} ${CFLAGS} ${CPPFLAGS} ${GUIFLAGS} ${SOURCE} ${COMMON} ${GUI} ${LIBS} ${GUILIBS} ${DEBUG} -D__DEBUG_WITH_ENCRYPTION__ -o ${APP}
	-@echo -e "built `echo -e ${SOURCE} ${COMMON} ${GUI} | sed 's/ /\n      /g'`  ${APP}"

link:
	 @ln -fs ${APP} ${ALT}
	-@echo -e "linked ${ALT}  ${APP}"

language:
	-@echo -e "TODO - string translation"
#	@${MAKE} -C po

man:
	 @gzip -c docs/${APP}.1a > ${APP}.1a.gz
	-@echo -e "compressing docs/${APP}.1a  ${APP}.1a.gz"

install:
# install the main executable, also link decrypt
	 @install -m 755 -s -D -T ${APP} ${PREFIX}/usr/bin/${APP}
	-@echo -e "installed ${APP}  ${PREFIX}/usr/bin/${APP}"
	 @ln -f ${PREFIX}/usr/bin/${APP} ${PREFIX}/usr/bin/${ALT}
	-@echo -e "linked ${ALT}  ${APP}"
# install the pixmaps
	 @install -m 644 -D -T pixmaps/encrypt.svg ${PREFIX}/usr/${LOCAL}/share/pixmaps/encrypt.svg
	-@echo -e "installed pixmaps/encrypt.svg  ${PREFIX}/usr/${LOCAL}/share/pixmaps/encrypt.svg"
	 @install -m 644 -D -T pixmaps/encrypt_button.svg ${PREFIX}/usr/${LOCAL}/share/pixmaps/encrypt_button.svg
	-@echo -e "installed pixmaps/encrypt_button.svg  ${PREFIX}/usr/${LOCAL}/share/pixmaps/encrypt_button.svg"
# next encrypt.glade
	 @install -m 644 -D -T etc/encrypt.glade ${PREFIX}/usr/${LOCAL}/share/encrypt/encrypt.glade
	-@echo -e "installed etc/encrypt.glade  ${PREFIX}/usr/${LOCAL}/share/encrypt/encrypt.glade"
# and an example rc file
	 @install -m 644 -D -T etc/encryptrc ${PREFIX}/usr/${LOCAL}/share/encrypt/encryptrc
	-@echo -e "installed etc/encryptrc  ${PREFIX}/usr/${LOCAL}/share/encrypt/encryptrc"
# ditto, but this time for the man page
	 @install -m 644 -D -T encrypt.1a.gz ${PREFIX}/usr/${LOCAL}/share/man/man1/encrypt.1a.gz
	-@echo -e "installed encrypt.1a.gz  ${PREFIX}/usr/${LOCAL}/share/man/man1/encrypt.1a.gz"
# and then the desktop files
	 @install -m 644 -D -T etc/encrypt.desktop ${PREFIX}/usr/${LOCAL}/share/applications/encrypt.desktop
	-@echo -e "installed etc/encrypt.desktop  ${PREFIX}/usr/${LOCAL}/share/applications/encrypt.desktop"
	 @install -m 644 -D -T etc/thunar-sendto.desktop ${PREFIX}/usr/${LOCAL}/share/Thunar/sendto/encrypt.desktop
	-@echo -e "installed etc/thunar-sendto.desktop  ${PREFIX}/usr/${LOCAL}/share/Thunar/sendto/encrypt.desktop"
# and the (example) magic pattern (if all else fails, copy to ~/.magic)
# TODO on Fedora concat to /usr/${LOCAL}/share/misc/magic and then recompile
	 @install -m 644 -D -T etc/magic ${PREFIX}/usr/${LOCAL}/share/encrypt/magic
	-@echo -e "installed etc/magic  ${PREFIX}/usr/${LOCAL}/share/encrypt/magic"
# and finally the auto-complete scripts
	 @install -m 755 -D -T etc/autocomplete.bash ${PREFIX}/usr/${LOCAL}/share/bash-completion/completions/encrypt
	-@echo -e "installed etc/autocomplete.bash  ${PREFIX}/usr/${LOCAL}/share/bash-completion/completions/encrypt"
	 @install -m 755 -D -T etc/autocomplete.zsh ${PREFIX}/usr/${LOCAL}/share/zsh/functions/Completion/Unix/_encrypt
	-@echo -e "installed etc/autocomplete.zsh  ${PREFIX}/usr/${LOCAL}/share/zsh/functions/Completion/Unix/_encrypt"

uninstall:
	@rm -fr ${PREFIX}/usr/${LOCAL}/share/encrypt
	@rm -f ${PREFIX}/usr/${LOCAL}/share/bash-completion/completions/encrypt
	@rm -f ${PREFIX}/usr/${LOCAL}/share/zsh/functions/Completion/Unix/_encrypt
	@rm -f ${PREFIX}/usr/${LOCAL}/share/pixmaps/encrypt.svg
	@rm -f ${PREFIX}/usr/${LOCAL}/share/pixmaps/encrypt_button.svg
	@rm -f ${PREFIX}/usr/${LOCAL}/share/man/man1/encrypt.1a.gz
	@rm -f ${PREFIX}/usr/${LOCAL}/share/applications/encrypt.desktop
	@rm -f ${PREFIX}/usr/${LOCAL}/share/Thunar/sendto/encrypt.desktop
	@rm -f ${PREFIX}/usr/bin/${ALT}
	@rm -f ${PREFIX}/usr/bin/${APP}

clean:
	@rm -f ${APP} ${ALT}
	@rm -f gmon.out

distclean: clean
	@rm -f ${APP}.1a.gz
	@rm -fr pkg build
	@rm -f ${APP}*.pkg.tar.xz
	@rm -f ${APP}*.tgz
